#!/bin/bash

# permute_m [n] [# of repeating elements 1...] [# of repeating elements 2...] [# of repeating elements ...n]
# This script computes the total possible number of permutations of a set with repeating, non-distinguishable elements. Meaning, not each element of the set is disjoint from all other elements.
# This is to find the possible permutations of a set with cardinality n without repeated choices. Such as the set [A, B, C, C, C, D]. It would make no sense with repeated choices, as any choice for
# C is the same as any other position of C. Thus, this formula shows the number of possible permutations given that are a finite number of repeated choices for only certain elements.

# Mathematically, this is refered to as the permutation of a multiset, hence permute_m.
# idea: how many ways can you arrange a set of items on a shelf, when there are a finite amount of repeated items?

# PermuteM(n, 1, 2,... ,m) = n!/(m1!m2!m3!....mn!) , where m is the number of times the element repeats in the set, and n is the cardinality of the set
# example: set A := [1, 2, 2, 2, 3, 4, 4, 5]
#	   PermuteM(8, 1, 3, 1, 2, 1) = 8!/(1!*3!*1!*2!*1!)

permute_m(){

	local n="$1"

# define help flag
	if [[ "$n" == "-h" || "$n" == "--help" ]]; then
		printf "This function computes the number of permutations of a multiset. \nUsage: permute_m [n] [# of repeating elements 1...] [# of repeating elements 2...] [# of repeating elements ...n] \nWhere n is the cardinality of the set, and the remaining arguments are the count of each repeating element\n\n"
		exit 0
	fi

# check for null argument
	if [[ -z "$n" ]]; then
		printf "Error: function needs at least two arguments.\nTry -h or --help flags for usage.\n\n" > &2
		return 1
	fi

# ensure all entries are non-negative integers
	if [[ ! $@ =~ ^[0-9]+$ ]]; then
		printf "Error: entries must be non-negative integers/n/n" >&2
		return 1
	fi

# following the definition of n, all other entries must be smaller than n
	if if


}

# pass all arguments given to the script into the function created above
permute_m $@
