#!/bin/bash

# permute_r n r
# see notes/permute_r_notes for more details

# Prep(n,r) = n^r
# n := total number of elements in the set
# r := number of indices to permute from the set with repeated choices


permute_r() {

	local n="$1"
	local r="$2"
	local null="$3"


#define help flag
	if [[ "$n" == "-h" || "$n" == "--help" ]]; then
		printf "This functions computes the number of permutations of r choices from a set of length n, allowing for repeated choice.\n Usage: permute_r [n] [r]\n"
		exit 0
	fi

#check for null entries
	if [[ -z "$n" || -z "$r" ]]; then
		printf "Error: function needs two arguments.\nTry including -h or --help flags for usage\n\n" >&2
		return 1
	fi

#check for more than two arguments
	if [[ ! -z "$null" ]]; then
		printf "Error: can only accept two arguments.\nTry using -h or --help flags for usage\n\n" >&2
		return 1
	fi

#regex check
	if [[ ! "$n" =~ ^[0-9]+$ || ! "$r" =~ ^[0-9]+$ ]]; then
		printf "Error: entries must be non-negative integers\n\n" >&2
		return 1
	fi

#compute solution

	local solution=$(echo "$n ^ $r" | bc)

#check to make sure nothing went wrong, then output solution
	if [[ -z "$solution" || "$solution" == "?" ]]; then
		printf "Error: failed to compute" >&2
		return 1
	fi

	echo "$solution"
}

permute_r $1 $2 $3
